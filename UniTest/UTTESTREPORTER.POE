FUNCTION_BLOCK utTestReporter
VAR_EXTERNAL

END_VAR

VAR_INPUT
	Size : UINT; (*Size of array (Nr of indexes)*)
	Results : ARRAY[0..65535] OF utTestCaseSummary; (*Summaries of tests for each POU under test*)
END_VAR

VAR_OUTPUT
	NrPousUnderTest : UINT; (*Total number of POUs under test*)
	NrOfTests : UINT; (*Total number of tests*)
	NrTestsPassed : UINT; (*Number of tests passed*)
	NrTestsFailed : UINT; (*Number of tests failed*)
	PassRate : REAL; (*Total pass rate*)
	TestsInProgress : BOOL; (*Indicates that one or more tests are in progress*)
	Error : BOOL; (*Indicates that one or more tests are in error state*)
END_VAR

VAR
	i : UINT; (*Iterator variable*)
END_VAR

(*Automatically declared*)
VAR_EXTERNAL
END_VAR
(**     {*https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fb/utTestReporter.md*} **)
(**     {*Reset totals*} **)
(**     NrPousUnderTest := 0; **)
	(* assign - Stmt *)
	LD 0
	ST NrPousUnderTest

(**     NrOfTests := 0; **)
	(* assign - Stmt *)
	LD 0
	ST NrOfTests

(**     NrTestsPassed := 0; **)
	(* assign - Stmt *)
	LD 0
	ST NrTestsPassed

(**     NrTestsFailed := 0; **)
	(* assign - Stmt *)
	LD 0
	ST NrTestsFailed

(**     PassRate := 0.0; **)
	(* assign - Stmt *)
	LD 0.0
	ST PassRate

(**     TestsInProgress := FALSE; **)
	(* assign - Stmt *)
	LD FALSE
	ST TestsInProgress

(**     Error := FALSE; **)
	(* assign - Stmt *)
	LD FALSE
	ST Error

(**  **)
(**     {*Count totals*}  **)
(**     FOR i:=0 TO Size DO **)
	(* for - Init *)
	LD 0
	ST i
	EQ Size
	JMPC ODK_FOR_STMTS_000000000000001

	(* for - Cond *)
	ODK_FOR_000000000000001:

	LD 0
	GT Size
	JMPC ODK_FOR_DOWN_000000000000001

	LD 0
	GT 1
	JMPC ODK_END_FOR_000000000000001

	LD Size
	LT i
	JMPC ODK_END_FOR_000000000000001
	JMP ODK_FOR_STMTS_000000000000001

	ODK_FOR_DOWN_000000000000001:

	LD Size
	GT i
	JMPC ODK_END_FOR_000000000000001

	LD 0
	LT 1
	JMPC ODK_END_FOR_000000000000001

		(* for - Stmts *)
		ODK_FOR_STMTS_000000000000001:

(**     	IF Results[i].Id > 0 THEN **)
		(* if - Cond *)
		LD Results[i].Id
		GT 0
		JMPCN ODK_SKIP_000000000000002_000000000000001

			(* then - Stmts *)

(**     		{*Count existing POUs under test*} **)
(**     		NrPousUnderTest := NrPousUnderTest + 1; **)
			(* assign - Stmt *)
			LD NrPousUnderTest
			ADD 1
			ST NrPousUnderTest

(**     		{*Count the pass rate. Needs to be divided in the end by the number of total tests*} **)
(**     		PassRate := PassRate + Results[i].PassRate; **)
			(* assign - Stmt *)
			LD PassRate
			ADD Results[i].PassRate
			ST PassRate

(**     		{*Count the number of tests*} **)
(**     		NrOfTests := NrOfTests + Results[i].TotalTests; **)
			(* assign - Stmt *)
			LD NrOfTests
			ADD Results[i].TotalTests
			ST NrOfTests

(**     		{*Count the number of tests passed*} **)
(**     		NrTestsPassed := NrTestsPassed + Results[i].TestsPassed; **)
			(* assign - Stmt *)
			LD NrTestsPassed
			ADD Results[i].TestsPassed
			ST NrTestsPassed

(**     		{*Count the number of tests failed*} **)
(**     		NrTestsFailed := NrTestsFailed + Results[i].TestsFailed; **)
			(* assign - Stmt *)
			LD NrTestsFailed
			ADD Results[i].TestsFailed
			ST NrTestsFailed

(**     		 **)
(**     		{*Indicators*} **)
(**     		IF Results[i].TestsRunning THEN **)
			(* if - Cond *)
			LD Results[i].TestsRunning
			JMPCN ODK_SKIP_000000000000003_000000000000001

				(* then - Stmts *)

(**     			TestsInProgress := TRUE; **)
				(* assign - Stmt *)
				LD TRUE
				ST TestsInProgress

				JMP ODK_END_IF_000000000000003

(**     		END_IF; **)
			(* if - End *) 
			ODK_SKIP_000000000000003_000000000000001:
			ODK_END_IF_000000000000003:

(**     		IF Results[i].Error <> ut_NO_ERROR THEN **)
			(* if - Cond *)
			LD Results[i].Error
			NE ut_NO_ERROR
			JMPCN ODK_SKIP_000000000000004_000000000000001

				(* then - Stmts *)

(**     			Error := TRUE; **)
				(* assign - Stmt *)
				LD TRUE
				ST Error

				JMP ODK_END_IF_000000000000004

(**     		END_IF; **)
			(* if - End *) 
			ODK_SKIP_000000000000004_000000000000001:
			ODK_END_IF_000000000000004:

			JMP ODK_END_IF_000000000000002

(**     	END_IF; **)
		(* if - End *) 
		ODK_SKIP_000000000000002_000000000000001:
		ODK_END_IF_000000000000002:

	(* for - By *)
	LD 1
	ADD i
	ST i
(**     END_FOR; **)

	JMP ODK_FOR_000000000000001

	(* for - End *) 
	ODK_END_FOR_000000000000001:

(**     PassRate := PassRate / UINT_TO_REAL(NrPousUnderTest); **)
	(* assign - Stmt *)
	LD PassRate
	DIV ( NrPousUnderTest
		UINT_TO_REAL 
	)
	ST PassRate


END_FUNCTION_BLOCK